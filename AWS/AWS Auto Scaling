## 이론

- 애플리케이션의 요구 사항에 따라 AWS 리소스의 용량을 자동으로 조정해주는 서비스이다.
- 사용자가 정의한 조건에 따라 EC2](https://www.notion.so/EC2-c034da11d05c481d9e37fbc115c340fd?pvs=21) 인스턴스, [DynamoDB](https://www.notion.so/DynamoDB-26336a6a08ac48c98aa3dea8cfac08c9?pvs=21) 테이블, Aurora 리플리카, ECS 서비스 등의 리소스 수를 자동으로 늘리거나 줄인다.

### 장점

- 애플리케이션의 성능을 유지하면서도 비용 효율성을 극대화할 수 있다.
- **비용 효율성**면에서 좋다. 리소스를 필요할 때만 사용하고, 필요 없을 때는 자동으로 줄이기 때문이다.
- 애플리케이션의 성능을 최적화하여 트래픽 변화에 신속하게 대응할 수 있다.
- **자동화된 운영**이 가능하다. 수동으로 리소스를 조정할 필요 없이, 설정된 조건에 따라 자동으로 리소스가 관리된다.

### 주요 기능

- **동적 확장 및 축소**
    - 애플리케이션의 로드에 따라 리소스의 용량을 자동으로 조정한다.
        - ex) 사용량이 증가하면 EC2 인스턴스의 수를 자동으로 늘리고, 사용량이 줄어들면 불필요한 인스턴스를 종료하여 비용을 절감한다
- **예측적 확장(Predictive Scaling)**
    - 이전에 수집된 데이터를 기반으로 향후 트래픽 패턴을 예측하여, 예상되는 부하 증가에 대비해 미리 리소스를 확장할 수 있다.
    - 이를 통해 성능 저하 없이 트래픽 급증을 처리할 수 있다.
- **유연한 정책 관리**
    - [목표 추적 확장](Target Tracking Scaling) : 특정 메트릭(ex. CPU 사용률)을 기준으로 목표를 설정하고, 이 목표를 유지하기 위해 리소스를 자동으로 조정한다.
    - [단계 확장](Step Scaling) : 메트릭이 특정 임계값을 초과할 때, 설정된 단계별로 리소스를 조정한다.
    - [간단한 스케일링](Simple Scaling) : 특정 조건을 만족할 때 리소스를 추가하거나 제거하는 간단한 방법을 제공한다.
- **조정 가능한 최소 및 최대 용량**
    - 사용자는 리소스의 최소 및 최대 용량을 설정할 수 있다.
    - 특정 한도 내에서만 리소스를 조정하도록 제한할 수 있다.
- **다중 리소스 그룹 관리**
    - 단일 애플리케이션에서 여러 유형의 리소스를 동시에 조정할 수 있다.
    - EC2 인스턴스와 DynamoDB 테이블의 용량을 함께 관리할 수 있다.
- **모니터링 및 알림**
    - [CloudWatch](https://www.notion.so/CloudWatch-38d8dadb80a343eb96e5163d127655a1?pvs=21) 와 통합되어 리소스의 상태와 성능을 모니터링하고, 문제가 발생하거나 특정 조건이 충족될 때 알림을 받을 수 있다.

### 사용 사례

1. 웹 애플리케이션 확장
    - 웹 트래픽이 예상치 못하게 급증하는 경우, Auto Scaling을 통해 웹 서버 인스턴스의 수를 자동으로 늘려 성능을 유지할 수 있다.
    - 트래픽이 줄어들면 인스턴스를 줄여 비용을 절감한다.
2. 백엔드 처리 시스템
    - 대규모 데이터 처리 작업이나 배치 작업의 부하에 따라 자동으로 처리 리소스를 조정하여 작업 완료 시간을 최소화하고 비용을 최적화할 수 있다.
3. 데이터베이스 확장
    - [DynamoDB](https://www.notion.so/DynamoDB-26336a6a08ac48c98aa3dea8cfac08c9?pvs=21) 테이블이나 Aurora DB의 읽기 및 쓰기 용량을 자동으로 조정하여 사용량 변화에 맞게 성능을 유지할 수 있다.
4. 서버리스 애플리케이션 확장
    - [Lambda](https://www.notion.so/Lambda-28875ce473e84a03b224d5abbca126a6?pvs=21) 와 같은 서버리스 컴퓨팅 자원도 Auto Scaling을 통해 트래픽 변화에 따라 자동으로 조정할 수 있다.
